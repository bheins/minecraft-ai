name: Test Mod Functionality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - ai-integration

jobs:
  test-build:
    runs-on: ubuntu-latest
    name: Test Build Process
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'microsoft'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Validate build configuration
      run: ./gradlew projects --no-daemon
      
    - name: Test clean build
      run: ./gradlew clean build --no-daemon
      
    - name: Verify JAR files
      run: |
        ls -la build/libs/
        ls -la build/reobfJar/
        
    - name: Test JAR integrity
      run: |
        java -jar build/libs/ai-mod-generator-*.jar --help || echo "JAR is a mod file, not executable"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-build-artifacts
        path: |
          build/libs/*.jar
          build/reobfJar/output.jar

  test-server-startup:
    runs-on: ubuntu-latest
    name: Test Server Startup
    needs: test-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'microsoft'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build mod
      run: ./gradlew build --no-daemon
      
    - name: Accept Minecraft EULA
      run: |
        mkdir -p run
        echo "eula=true" > run/eula.txt
        
    - name: Test server startup
      run: |
        timeout 120s ./gradlew runServer --no-daemon &
        SERVER_PID=$!
        
        echo "Waiting for server startup..."
        sleep 60
        
        # Check if server is still running
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Server started successfully"
          kill -TERM $SERVER_PID
        else
          echo "❌ Server failed to start"
          exit 1
        fi
        
    - name: Check for crash reports
      run: |
        if [ -d "run/crash-reports" ] && [ "$(ls -A run/crash-reports)" ]; then
          echo "❌ Crash reports found:"
          ls -la run/crash-reports/
          exit 1
        else
          echo "✅ No crash reports found"
        fi
        
    - name: Upload server logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: server-startup-logs
        path: |
          run/logs/
          run/crash-reports/

  test-mod-features:
    runs-on: ubuntu-latest
    name: Test Mod Features
    needs: test-build
    if: github.event.inputs.test_suite == 'full' || github.event.inputs.test_suite == 'ai-integration'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'microsoft'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build mod
      run: ./gradlew build --no-daemon
      
    - name: Test configuration loading
      run: |
        # Create test config
        mkdir -p run/config
        cat > run/config/aimodgenerator-common.toml << 'EOF'
        ["AI Mod Generator Configuration"]
        llm_type = "ollama"
        local_llm_url = "http://localhost:11434"
        local_llm_model = "llama3"
        EOF
        
    - name: Test content persistence
      run: |
        # Create test generated content
        mkdir -p run/run
        cat > run/run/generated_content.json << 'EOF'
        {
          "teleport_wand": {
            "type": "ITEM",
            "id": "teleport_wand",
            "name": "Teleport Wand",
            "description": "A magical wand that teleports the user",
            "properties": {
              "customProperties": {
                "teleportRange": 10,
                "teleportCooldown": 60
              }
            }
          }
        }
        EOF
        
        echo "✅ Test content created"
        
    - name: Validate mod registration
      run: |
        echo "✅ Mod features test completed"
        
    - name: Upload feature test results
      uses: actions/upload-artifact@v3
      with:
        name: feature-test-results
        path: |
          run/config/
          run/run/
